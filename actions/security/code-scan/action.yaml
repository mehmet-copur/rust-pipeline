name: 'Rust Code Security Scan'
description: 'Performs code security analysis using Clippy and Rustfmt on Rust projects.'
inputs:
  allow-failure:
    description: 'Set to true to allow the workflow to continue even if this action fails.'
    required: false
    default: 'false'
  rust-version:
    description: 'Rust version to use for linting and formatting.'
    required: false
    default: 'stable'
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ inputs.rust-version }}
        components: clippy, rustfmt
        override: true

    - name: Run Clippy
      run: cargo clippy --message-format=json > clippy_output.json || true
      shell: bash

    - name: Annotate clippy warnings
      if: ${{ inputs.allow-failure }} == 'false'
      run: |
        warnings=$(jq '. | select(.type == "warning")' clippy-output.json | jq -s '. | length')
        if [[ "$warnings" -gt 0 ]]; then
          echo "::error::Clippy found warnings"
          exit 1
        fi
      shell: bash

    - name: Check Rust Formatting with Rustfmt
      run: cargo fmt -- --check
      shell: bash
