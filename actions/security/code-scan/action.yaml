name: 'Rust Code Security Scan'
description: 'Performs comprehensive code security analysis for Rust projects, including static analysis, linting, and formatting checks.'
inputs:
  allow-failure:
    description: 'Set to "true" to continue the workflow even if this action fails.'
    required: false
    default: 'false'
  max-clippy-warnings:
    description: 'Maximum number of Clippy warnings to tolerate before failing the action.'
    required: false
    default: '10'
  rust-toolchain:
    description: 'Specify the Rust toolchain version to use for linting (e.g., stable, nightly, 1.52.0).'
    required: false
    default: 'stable'
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Rust Environment
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ inputs.rust-toolchain }}
        override: true

    - name: Install jq (if not already installed)
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get install jq
        fi
      shell: bash

    - name: Install clippy-sarif
      run: cargo install clippy-sarif
      shell: bash

    - name: Run Clippy with JSON output
      run: cargo clippy --message-format=json > clippy_output.json || true
      shell: bash

    - name: Convert Clippy JSON to SARIF
      run: clippy-sarif -o clippy.sarif clippy_output.json
      shell: bash

    - name: Upload SARIF results to GitHub
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: clippy.sarif

    - name: Check Code Formatting with Rustfmt
      run: cargo fmt -- --check
      shell: bash
      continue-on-error: ${{ inputs.allow-failure == 'true' }}

    - name: Analyze Clippy Warnings
      if: ${{ inputs.allow-failure != 'true' }}
      run: |
        WARNINGS_COUNT=$(cat clippy_output.json | jq '.diagnostics | length')
        MAX_WARNINGS=${{ inputs.max-clippy-warnings }}
        echo "Clippy warnings count: $WARNINGS_COUNT"
        if [ "$WARNINGS_COUNT" -gt "$MAX_WARNINGS" ]; then
          echo "::error ::Exceeded maximum Clippy warning count of $MAX_WARNINGS, found $WARNINGS_COUNT warnings"
          exit 1
        fi
      shell: bash
