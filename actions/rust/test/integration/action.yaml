name: "Run Integration Tests"
description: "Executes integration tests for the Rust project with support for complex setups."

inputs:
  command:
    description: 'The test command to use, defaulting to "test" which can be overridden as needed.'
    required: false
    default: "test"
  features:
    description: "Space-separated list of features to test with."
    required: false
  all-features:
    description: "Whether to test all features."
    required: false
    default: "false"
  no-default-features:
    description: "Whether to disable the default features."
    required: false
    default: "false"
  target:
    description: "Test for the target triple."
    required: false
  args:
    description: "Additional arguments to pass to cargo test."
    required: false
  test-binary-name:
    description: "Specific binary to run integration tests on."
    required: false
  setup-script:
    description: "Path to an optional setup script to execute before running tests."
    required: false
  teardown-script:
    description: "Path to an optional teardown script to execute after tests are complete."
    required: false
  parallel:
    description: 'Run tests in parallel. Set to "false" to run sequentially.'
    required: false
    default: "true"
  junit-output:
    description: "If set, will produce a JUnit XML report at this path."
    required: false

runs:
  using: "composite"
  steps:
    - name: Execute Setup Script
      if: inputs.setup-script != ''
      shell: bash
      run: |
        echo "Running setup script for integration tests..."
        chmod +x ${{ inputs.setup-script }}
        ./${{ inputs.setup-script }}

    - name: Run Integration Tests
      shell: bash
      run: |
        command="${{ inputs.command }}"
        features="${{ inputs.features }}"
        all_features="${{ inputs.all-features }}"
        no_default_features="${{ inputs.no-default-features }}"
        target="${{ inputs.target }}"
        test_binary_name="${{ inputs.test-binary-name }}"
        additional_args="${{ inputs.args }}"
        parallel="${{ inputs.parallel }}"
        junit_output="${{ inputs.junit-output }}"
        test_command="cargo $command"

        if [ "$all_features" == "true" ]; then
          test_command="$test_command --all-features"
        elif [ -n "$features" ]; then
          test_command="$test_command --features $features"
        fi

        if [ "$no_default_features" == "true" ]; then
          test_command="$test_command --no-default-features"
        fi

        if [ -n "$target" ]; then
          test_command="$test_command --target $target"
        fi

        if [ -n "$test_binary_name" ]; then
          test_command="$test_command --bin $test_binary_name"
        fi

        if [ "$parallel" == "false" ]; then
          test_command="$test_command -- --test-threads=1"
        fi

        if [ -n "$additional_args" ]; then
          test_command="$test_command $additional_args"
        fi

        if [ -n "$junit_output" ]; then
          test_command="$test_command -- -Z unstable-options --report-time --show-output --format=junit > $junit_output"
        fi

        echo "Running integration tests with the following command: $test_command"
        $test_command

        if [ $? -ne 0 ]; then
          echo "Integration tests failed. Review the logs above for details."
          exit 1
        fi

    - name: Execute Teardown Script
      if: inputs.teardown-script != ''
      shell: bash
      run: |
        echo "Running teardown script after integration tests..."
        chmod +x ${{ inputs.teardown-script }}
        ./${{ inputs.teardown-script }}

    - name: Output Test Summary
      if: always()
      shell: bash
      run: |
        # Implement logic to output a summary of test results or print logs from failed tests.
        # If using JUnit output, you could also parse and summarize here.
        if [ -n "$junit_output" ]; then
          echo "JUnit report generated at $junit_output"
        else
          echo "Integration test summary placeholder. Implement summary logic."
        fi
