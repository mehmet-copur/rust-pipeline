name: 'Run Unit Tests'
description: 'Executes unit tests for the Rust project with configurable options.'

inputs:
  command:
    description: 'The test command to use.'
    required: false
    default: 'test'
  features:
    description: 'Space-separated list of features to test with.'
    required: false
  all-features:
    description: 'Whether to test all features.'
    required: false
    default: 'false'
  no-default-features:
    description: 'Whether to disable the default features.'
    required: false
    default: 'false'
  exclude:
    description: 'Space-separated list of packages to exclude.'
    required: false
  args:
    description: 'Additional arguments to pass to cargo test.'
    required: false
  verbose:
    description: 'Enable verbose output for cargo test.'
    required: false
    default: 'false'
  skip-tests:
    description: 'Skip running tests entirely.'
    required: false
    default: 'false'
  cargo-home:
    description: 'Custom CARGO_HOME for where to cache dependencies.'
    required: false

outputs:
  test-report:
    description: 'Path to the test results report, if generated.'

runs:
  using: 'composite'
  steps:
    - name: Check Skip Tests
      shell: bash
      run: |
        if [ "${{ inputs.skip-tests }}" == "true" ]; then
          echo "Skipping tests as instructed."
          exit 0
        fi

    - name: Setup Cargo Home
      shell: bash
      run: |
        if [ -n "${{ inputs.cargo-home }}" ]; then
          export CARGO_HOME="${{ inputs.cargo-home }}"
          echo "CARGO_HOME set to $CARGO_HOME"
        fi

    - name: Run Tests
      shell: bash
      run: |
        command="${{ inputs.command }}"
        features="${{ inputs.features }}"
        all_features="${{ inputs.all-features }}"
        no_default_features="${{ inputs.no-default-features }}"
        exclude="${{ inputs.exclude }}"
        additional_args="${{ inputs.args }}"
        verbose="${{ inputs.verbose }}"
        test_command="cargo $command"

        if [ "$all_features" == "true" ]; then
          test_command="$test_command --all-features"
        elif [ -n "$features" ]; then
          test_command="$test_command --features $features"
        fi

        if [ "$no_default_features" == "true" ]; then
          test_command="$test_command --no-default-features"
        fi

        if [ -n "$exclude" ]; then
          for package in $exclude; do
            test_command="$test_command --exclude $package"
          done
        fi

        if [ -n "$additional_args" ]; then
          test_command="$test_command $additional_args"
        fi

        if [ "$verbose" == "true" ]; then
          test_command="$test_command --verbose"
        fi

        echo "Running tests with the following command: $test_command"
        $test_command

        if [ $? -ne 0 ]; then
          echo "Test failures detected. Review the logs above for details."
          exit 1
        fi

    - name: Output Test Summary
      shell: bash
      run: |
        # Implement logic to output a summary of test results or print logs from failed tests.
        # This can be done using cargo's --message-format=json option or other tools
        # and then processing the JSON output into a human-readable summary.
        # For example, you could parse and print a summary with a script here.
        echo "Test summary placeholder. Implement summary logic."
