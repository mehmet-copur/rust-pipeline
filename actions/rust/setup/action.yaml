name: 'Setup Rust Environment'
description: 'Prepares a comprehensive Rust environment for various workflows, including toolchain setup, caching, and environment configuration. It also installs cargo-outdated for dependency management.'

inputs:
  rust-version:
    description: 'The version of the Rust toolchain to use. Defaults to stable.'
    required: false
    default: 'stable'
  cache-key-prefix:
    description: 'A prefix to use for the cache key, ensuring itâ€™s unique for the job.'
    required: false
    default: 'rust-cache-'
  additional-env-vars:
    description: 'A JSON string of additional environment variables to set, formatted as key-value pairs.'
    required: false

outputs:
  rust-path:
    description: 'The path to the installed Rust toolchain.'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # Ensures your workflow checks out the code before setting up Rust environment

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust-version }}
        profile: minimal
        override: true
        components: rustfmt, clippy
      # Installs the Rust toolchain, including rustfmt and clippy for code formatting and linting

    - name: Install cargo-outdated (if not cached)
      run: |
        if ! command -v cargo-outdated &> /dev/null
        then
          echo "Installing cargo-outdated..."
          cargo install cargo-outdated
        else
          echo "cargo-outdated is already installed."
        fi
      # Checks if cargo-outdated is already installed to avoid unnecessary installations, improving CI efficiency

    - name: Cache Cargo directories
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ inputs.cache-key-prefix }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}-${{ runner.os }}-
      # Caches Cargo directories to speed up builds in subsequent runs

    - name: Configure additional environment variables
      shell: bash
      run: |
        if [ -n "${{ inputs.additional-env-vars }}" ]; then
          echo "Configuring additional environment variables..."
          echo "${{ inputs.additional-env-vars }}" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
        fi
      # Dynamically sets any additional environment variables passed to the action

    - name: Output Rust toolchain path
      shell: bash
      run: echo "rust-path=$(which rustc)" >> $GITHUB_ENV
      # Outputs the path of the installed Rust toolchain for use in subsequent steps
      