name: 'Build Project'
description: 'Compiles the Rust project, utilizing cached dependencies for efficiency.'

inputs:
  features:
    description: 'Optional features to build with.'
    required: false
  release:
    description: 'Whether to perform a release build.'
    required: false
    default: 'false'
  target:
    description: 'Build for the target triple.'
    required: false
  custom-build-command:
    description: 'A custom build command to run instead of cargo build.'
    required: false
  workspace-member:
    description: 'The workspace member to build. Useful for multi-package projects.'
    required: false

outputs:
  binary-path:
    description: 'The path to the compiled binary.'

runs:
  using: 'composite'
  steps:
    - name: Pre-Build Checks
      shell: bash
      run: |
        if [ ! -f "Cargo.toml" ]; then
          echo "Error: Cargo.toml not found in the repository."
          exit 1
        fi

    - name: Build Project
      shell: bash
      run: |
        FEATURES_FLAG="${{ inputs.features }}"
        RELEASE_FLAG="${{ inputs.release }}"
        TARGET_FLAG="${{ inputs.target }}"
        WORKSPACE_MEMBER_FLAG="${{ inputs.workspace-member }}"
        CUSTOM_BUILD_COMMAND="${{ inputs.custom-build-command }}"

        build_command="cargo build"
        if [ -n "$CUSTOM_BUILD_COMMAND" ]; then
          echo "Running custom build command."
          build_command="$CUSTOM_BUILD_COMMAND"
        else
          echo "Running standard cargo build command."
          if [ -n "$FEATURES_FLAG" ]; then
            build_command="$build_command --features $FEATURES_FLAG"
          fi
          if [ "$RELEASE_FLAG" == "true" ]; then
            build_command="$build_command --release"
          fi
          if [ -n "$TARGET_FLAG" ]; then
            build_command="$build_command --target $TARGET_FLAG"
          fi
          if [ -n "$WORKSPACE_MEMBER_FLAG" ]; then
            build_command="$build_command -p $WORKSPACE_MEMBER_FLAG"
          fi
        fi

        echo "Build command: $build_command"
        $build_command

        if [ $? -ne 0 ]; then
          echo "Build failed."
          exit 1
        fi

    - name: Output Binary Path
      shell: bash
      run: |
        if [ -z "${{ inputs.custom-build-command }}" ]; then
          binary_name=$(basename $GITHUB_REPOSITORY)
          if [ -n "${{ inputs.workspace-member }}" ]; then
            binary_name=${{ inputs.workspace-member }}
          fi
          binary_path=$(find target -type f -name $binary_name -print -quit)
          if [ -n "$binary_path" ]; then
            echo "binary-path=$binary_path" >> $GITHUB_ENV
            echo "binary_path=$binary_path" >> $GITHUB_OUTPUT
          else
            echo "Error: Compiled binary not found."
            exit 1
          fi
        fi
